// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: deposits/v1/deposits.proto

package depositsv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/iainvm/deposits/application/grpc/gen/deposits/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// DepositsServiceName is the fully-qualified name of the DepositsService service.
	DepositsServiceName = "deposits.v1.DepositsService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// DepositsServiceCreateDepositProcedure is the fully-qualified name of the DepositsService's
	// CreateDeposit RPC.
	DepositsServiceCreateDepositProcedure = "/deposits.v1.DepositsService/CreateDeposit"
	// DepositsServiceRetreiveDepositProcedure is the fully-qualified name of the DepositsService's
	// RetreiveDeposit RPC.
	DepositsServiceRetreiveDepositProcedure = "/deposits.v1.DepositsService/RetreiveDeposit"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	depositsServiceServiceDescriptor               = v1.File_deposits_v1_deposits_proto.Services().ByName("DepositsService")
	depositsServiceCreateDepositMethodDescriptor   = depositsServiceServiceDescriptor.Methods().ByName("CreateDeposit")
	depositsServiceRetreiveDepositMethodDescriptor = depositsServiceServiceDescriptor.Methods().ByName("RetreiveDeposit")
)

// DepositsServiceClient is a client for the deposits.v1.DepositsService service.
type DepositsServiceClient interface {
	CreateDeposit(context.Context, *connect.Request[v1.CreateDepositRequest]) (*connect.Response[v1.CreateDepositResponse], error)
	RetreiveDeposit(context.Context, *connect.Request[v1.RetreiveDepositRequest]) (*connect.Response[v1.RetreiveDepositResponse], error)
}

// NewDepositsServiceClient constructs a client for the deposits.v1.DepositsService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewDepositsServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) DepositsServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &depositsServiceClient{
		createDeposit: connect.NewClient[v1.CreateDepositRequest, v1.CreateDepositResponse](
			httpClient,
			baseURL+DepositsServiceCreateDepositProcedure,
			connect.WithSchema(depositsServiceCreateDepositMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		retreiveDeposit: connect.NewClient[v1.RetreiveDepositRequest, v1.RetreiveDepositResponse](
			httpClient,
			baseURL+DepositsServiceRetreiveDepositProcedure,
			connect.WithSchema(depositsServiceRetreiveDepositMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// depositsServiceClient implements DepositsServiceClient.
type depositsServiceClient struct {
	createDeposit   *connect.Client[v1.CreateDepositRequest, v1.CreateDepositResponse]
	retreiveDeposit *connect.Client[v1.RetreiveDepositRequest, v1.RetreiveDepositResponse]
}

// CreateDeposit calls deposits.v1.DepositsService.CreateDeposit.
func (c *depositsServiceClient) CreateDeposit(ctx context.Context, req *connect.Request[v1.CreateDepositRequest]) (*connect.Response[v1.CreateDepositResponse], error) {
	return c.createDeposit.CallUnary(ctx, req)
}

// RetreiveDeposit calls deposits.v1.DepositsService.RetreiveDeposit.
func (c *depositsServiceClient) RetreiveDeposit(ctx context.Context, req *connect.Request[v1.RetreiveDepositRequest]) (*connect.Response[v1.RetreiveDepositResponse], error) {
	return c.retreiveDeposit.CallUnary(ctx, req)
}

// DepositsServiceHandler is an implementation of the deposits.v1.DepositsService service.
type DepositsServiceHandler interface {
	CreateDeposit(context.Context, *connect.Request[v1.CreateDepositRequest]) (*connect.Response[v1.CreateDepositResponse], error)
	RetreiveDeposit(context.Context, *connect.Request[v1.RetreiveDepositRequest]) (*connect.Response[v1.RetreiveDepositResponse], error)
}

// NewDepositsServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewDepositsServiceHandler(svc DepositsServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	depositsServiceCreateDepositHandler := connect.NewUnaryHandler(
		DepositsServiceCreateDepositProcedure,
		svc.CreateDeposit,
		connect.WithSchema(depositsServiceCreateDepositMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	depositsServiceRetreiveDepositHandler := connect.NewUnaryHandler(
		DepositsServiceRetreiveDepositProcedure,
		svc.RetreiveDeposit,
		connect.WithSchema(depositsServiceRetreiveDepositMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/deposits.v1.DepositsService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case DepositsServiceCreateDepositProcedure:
			depositsServiceCreateDepositHandler.ServeHTTP(w, r)
		case DepositsServiceRetreiveDepositProcedure:
			depositsServiceRetreiveDepositHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedDepositsServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedDepositsServiceHandler struct{}

func (UnimplementedDepositsServiceHandler) CreateDeposit(context.Context, *connect.Request[v1.CreateDepositRequest]) (*connect.Response[v1.CreateDepositResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("deposits.v1.DepositsService.CreateDeposit is not implemented"))
}

func (UnimplementedDepositsServiceHandler) RetreiveDeposit(context.Context, *connect.Request[v1.RetreiveDepositRequest]) (*connect.Response[v1.RetreiveDepositResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("deposits.v1.DepositsService.RetreiveDeposit is not implemented"))
}
