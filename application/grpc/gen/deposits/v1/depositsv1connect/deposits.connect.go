// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: deposits/v1/deposits.proto

package depositsv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/iainvm/deposits/application/grpc/gen/deposits/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// DepositsServiceName is the fully-qualified name of the DepositsService service.
	DepositsServiceName = "deposits.v1.DepositsService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// DepositsServiceCreateProcedure is the fully-qualified name of the DepositsService's Create RPC.
	DepositsServiceCreateProcedure = "/deposits.v1.DepositsService/Create"
	// DepositsServiceGetProcedure is the fully-qualified name of the DepositsService's Get RPC.
	DepositsServiceGetProcedure = "/deposits.v1.DepositsService/Get"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	depositsServiceServiceDescriptor      = v1.File_deposits_v1_deposits_proto.Services().ByName("DepositsService")
	depositsServiceCreateMethodDescriptor = depositsServiceServiceDescriptor.Methods().ByName("Create")
	depositsServiceGetMethodDescriptor    = depositsServiceServiceDescriptor.Methods().ByName("Get")
)

// DepositsServiceClient is a client for the deposits.v1.DepositsService service.
type DepositsServiceClient interface {
	Create(context.Context, *connect.Request[v1.CreateRequest]) (*connect.Response[v1.CreateResponse], error)
	Get(context.Context, *connect.Request[v1.GetRequest]) (*connect.Response[v1.GetResponse], error)
}

// NewDepositsServiceClient constructs a client for the deposits.v1.DepositsService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewDepositsServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) DepositsServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &depositsServiceClient{
		create: connect.NewClient[v1.CreateRequest, v1.CreateResponse](
			httpClient,
			baseURL+DepositsServiceCreateProcedure,
			connect.WithSchema(depositsServiceCreateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		get: connect.NewClient[v1.GetRequest, v1.GetResponse](
			httpClient,
			baseURL+DepositsServiceGetProcedure,
			connect.WithSchema(depositsServiceGetMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// depositsServiceClient implements DepositsServiceClient.
type depositsServiceClient struct {
	create *connect.Client[v1.CreateRequest, v1.CreateResponse]
	get    *connect.Client[v1.GetRequest, v1.GetResponse]
}

// Create calls deposits.v1.DepositsService.Create.
func (c *depositsServiceClient) Create(ctx context.Context, req *connect.Request[v1.CreateRequest]) (*connect.Response[v1.CreateResponse], error) {
	return c.create.CallUnary(ctx, req)
}

// Get calls deposits.v1.DepositsService.Get.
func (c *depositsServiceClient) Get(ctx context.Context, req *connect.Request[v1.GetRequest]) (*connect.Response[v1.GetResponse], error) {
	return c.get.CallUnary(ctx, req)
}

// DepositsServiceHandler is an implementation of the deposits.v1.DepositsService service.
type DepositsServiceHandler interface {
	Create(context.Context, *connect.Request[v1.CreateRequest]) (*connect.Response[v1.CreateResponse], error)
	Get(context.Context, *connect.Request[v1.GetRequest]) (*connect.Response[v1.GetResponse], error)
}

// NewDepositsServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewDepositsServiceHandler(svc DepositsServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	depositsServiceCreateHandler := connect.NewUnaryHandler(
		DepositsServiceCreateProcedure,
		svc.Create,
		connect.WithSchema(depositsServiceCreateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	depositsServiceGetHandler := connect.NewUnaryHandler(
		DepositsServiceGetProcedure,
		svc.Get,
		connect.WithSchema(depositsServiceGetMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/deposits.v1.DepositsService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case DepositsServiceCreateProcedure:
			depositsServiceCreateHandler.ServeHTTP(w, r)
		case DepositsServiceGetProcedure:
			depositsServiceGetHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedDepositsServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedDepositsServiceHandler struct{}

func (UnimplementedDepositsServiceHandler) Create(context.Context, *connect.Request[v1.CreateRequest]) (*connect.Response[v1.CreateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("deposits.v1.DepositsService.Create is not implemented"))
}

func (UnimplementedDepositsServiceHandler) Get(context.Context, *connect.Request[v1.GetRequest]) (*connect.Response[v1.GetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("deposits.v1.DepositsService.Get is not implemented"))
}
