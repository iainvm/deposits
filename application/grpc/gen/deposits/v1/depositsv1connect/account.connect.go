// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: deposits/v1/account.proto

package depositsv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/iainvm/deposits/application/grpc/gen/deposits/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AccountsServiceName is the fully-qualified name of the AccountsService service.
	AccountsServiceName = "deposits.v1.AccountsService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AccountsServiceCreateAccountProcedure is the fully-qualified name of the AccountsService's
	// CreateAccount RPC.
	AccountsServiceCreateAccountProcedure = "/deposits.v1.AccountsService/CreateAccount"
	// AccountsServiceSetNominalProcedure is the fully-qualified name of the AccountsService's
	// SetNominal RPC.
	AccountsServiceSetNominalProcedure = "/deposits.v1.AccountsService/SetNominal"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	accountsServiceServiceDescriptor             = v1.File_deposits_v1_account_proto.Services().ByName("AccountsService")
	accountsServiceCreateAccountMethodDescriptor = accountsServiceServiceDescriptor.Methods().ByName("CreateAccount")
	accountsServiceSetNominalMethodDescriptor    = accountsServiceServiceDescriptor.Methods().ByName("SetNominal")
)

// AccountsServiceClient is a client for the deposits.v1.AccountsService service.
type AccountsServiceClient interface {
	CreateAccount(context.Context, *connect.Request[v1.CreateAccountRequest]) (*connect.Response[v1.CreateAccountResponse], error)
	SetNominal(context.Context, *connect.Request[v1.SetNominalRequest]) (*connect.Response[v1.SetNominalResponse], error)
}

// NewAccountsServiceClient constructs a client for the deposits.v1.AccountsService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAccountsServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AccountsServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &accountsServiceClient{
		createAccount: connect.NewClient[v1.CreateAccountRequest, v1.CreateAccountResponse](
			httpClient,
			baseURL+AccountsServiceCreateAccountProcedure,
			connect.WithSchema(accountsServiceCreateAccountMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		setNominal: connect.NewClient[v1.SetNominalRequest, v1.SetNominalResponse](
			httpClient,
			baseURL+AccountsServiceSetNominalProcedure,
			connect.WithSchema(accountsServiceSetNominalMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// accountsServiceClient implements AccountsServiceClient.
type accountsServiceClient struct {
	createAccount *connect.Client[v1.CreateAccountRequest, v1.CreateAccountResponse]
	setNominal    *connect.Client[v1.SetNominalRequest, v1.SetNominalResponse]
}

// CreateAccount calls deposits.v1.AccountsService.CreateAccount.
func (c *accountsServiceClient) CreateAccount(ctx context.Context, req *connect.Request[v1.CreateAccountRequest]) (*connect.Response[v1.CreateAccountResponse], error) {
	return c.createAccount.CallUnary(ctx, req)
}

// SetNominal calls deposits.v1.AccountsService.SetNominal.
func (c *accountsServiceClient) SetNominal(ctx context.Context, req *connect.Request[v1.SetNominalRequest]) (*connect.Response[v1.SetNominalResponse], error) {
	return c.setNominal.CallUnary(ctx, req)
}

// AccountsServiceHandler is an implementation of the deposits.v1.AccountsService service.
type AccountsServiceHandler interface {
	CreateAccount(context.Context, *connect.Request[v1.CreateAccountRequest]) (*connect.Response[v1.CreateAccountResponse], error)
	SetNominal(context.Context, *connect.Request[v1.SetNominalRequest]) (*connect.Response[v1.SetNominalResponse], error)
}

// NewAccountsServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAccountsServiceHandler(svc AccountsServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	accountsServiceCreateAccountHandler := connect.NewUnaryHandler(
		AccountsServiceCreateAccountProcedure,
		svc.CreateAccount,
		connect.WithSchema(accountsServiceCreateAccountMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	accountsServiceSetNominalHandler := connect.NewUnaryHandler(
		AccountsServiceSetNominalProcedure,
		svc.SetNominal,
		connect.WithSchema(accountsServiceSetNominalMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/deposits.v1.AccountsService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AccountsServiceCreateAccountProcedure:
			accountsServiceCreateAccountHandler.ServeHTTP(w, r)
		case AccountsServiceSetNominalProcedure:
			accountsServiceSetNominalHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAccountsServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAccountsServiceHandler struct{}

func (UnimplementedAccountsServiceHandler) CreateAccount(context.Context, *connect.Request[v1.CreateAccountRequest]) (*connect.Response[v1.CreateAccountResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("deposits.v1.AccountsService.CreateAccount is not implemented"))
}

func (UnimplementedAccountsServiceHandler) SetNominal(context.Context, *connect.Request[v1.SetNominalRequest]) (*connect.Response[v1.SetNominalResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("deposits.v1.AccountsService.SetNominal is not implemented"))
}
