// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: deposits/v1/pots.proto

package depositsv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/iainvm/deposits/application/grpc/gen/deposits/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// PotsServiceName is the fully-qualified name of the PotsService service.
	PotsServiceName = "deposits.v1.PotsService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// PotsServiceCreatePotProcedure is the fully-qualified name of the PotsService's CreatePot RPC.
	PotsServiceCreatePotProcedure = "/deposits.v1.PotsService/CreatePot"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	potsServiceServiceDescriptor         = v1.File_deposits_v1_pots_proto.Services().ByName("PotsService")
	potsServiceCreatePotMethodDescriptor = potsServiceServiceDescriptor.Methods().ByName("CreatePot")
)

// PotsServiceClient is a client for the deposits.v1.PotsService service.
type PotsServiceClient interface {
	CreatePot(context.Context, *connect.Request[v1.CreatePotRequest]) (*connect.Response[v1.CreatePotResponse], error)
}

// NewPotsServiceClient constructs a client for the deposits.v1.PotsService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPotsServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) PotsServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &potsServiceClient{
		createPot: connect.NewClient[v1.CreatePotRequest, v1.CreatePotResponse](
			httpClient,
			baseURL+PotsServiceCreatePotProcedure,
			connect.WithSchema(potsServiceCreatePotMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// potsServiceClient implements PotsServiceClient.
type potsServiceClient struct {
	createPot *connect.Client[v1.CreatePotRequest, v1.CreatePotResponse]
}

// CreatePot calls deposits.v1.PotsService.CreatePot.
func (c *potsServiceClient) CreatePot(ctx context.Context, req *connect.Request[v1.CreatePotRequest]) (*connect.Response[v1.CreatePotResponse], error) {
	return c.createPot.CallUnary(ctx, req)
}

// PotsServiceHandler is an implementation of the deposits.v1.PotsService service.
type PotsServiceHandler interface {
	CreatePot(context.Context, *connect.Request[v1.CreatePotRequest]) (*connect.Response[v1.CreatePotResponse], error)
}

// NewPotsServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPotsServiceHandler(svc PotsServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	potsServiceCreatePotHandler := connect.NewUnaryHandler(
		PotsServiceCreatePotProcedure,
		svc.CreatePot,
		connect.WithSchema(potsServiceCreatePotMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/deposits.v1.PotsService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case PotsServiceCreatePotProcedure:
			potsServiceCreatePotHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedPotsServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedPotsServiceHandler struct{}

func (UnimplementedPotsServiceHandler) CreatePot(context.Context, *connect.Request[v1.CreatePotRequest]) (*connect.Response[v1.CreatePotResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("deposits.v1.PotsService.CreatePot is not implemented"))
}
